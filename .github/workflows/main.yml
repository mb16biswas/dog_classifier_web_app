name: CI/CD Pipeline for Streamlit Application

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  APP_ID: streamlit-dog-classifier
  RUN_REGION: asia-south1
  SA_KEY_JSON: ${{ secrets.GCP_SA_KEY_JSON }}

jobs:
  build-and-deploy:
    name: Build, Test, and Deploy Streamlit App
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Setup Python environment for testing
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      # Step 3: Install dependencies
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install tensorflow tensorflow-hub

      # Step 4: Run tests (if any)
      - name: Run Tests
        run: |
          python -m unittest discover -s tests || echo "No tests found"

      # Step 5: Authenticate with Google Cloud
      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v0
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY_JSON }}

      # Step 6: Setup Google Cloud CLI
      - name: Setup Google Cloud CLI
        uses: google-github-actions/setup-gcloud@v1
        with:
          version: "latest"

      # Step 7: Build container image
      - name: Build Container Image
        run: |
          docker build -t gcr.io/$PROJECT_ID/$APP_ID:$GITHUB_SHA .

      # Step 8: Push container image to Google Container Registry
      - name: Push Image to Container Registry
        run: |
          docker push gcr.io/$PROJECT_ID/$APP_ID:$GITHUB_SHA

      # Step 9: Deploy to Google Cloud Run
      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy $APP_ID \
            --image=gcr.io/$PROJECT_ID/$APP_ID:$GITHUB_SHA \
            --region=$RUN_REGION \
            --platform=managed \
            --allow-unauthenticated


